// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "ecommerce/features/history_order/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repostory is an autogenerated mock type for the Repostory type
type Repostory struct {
	mock.Mock
}

// GetBuy provides a mock function with given fields: id
func (_m *Repostory) GetBuy(id uint) ([]domain.Core, error) {
	ret := _m.Called(id)

	var r0 []domain.Core
	if rf, ok := ret.Get(0).(func(uint) []domain.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSell provides a mock function with given fields: id
func (_m *Repostory) GetSell(id uint) ([]domain.Core, error) {
	ret := _m.Called(id)

	var r0 []domain.Core
	if rf, ok := ret.Get(0).(func(uint) []domain.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepostory interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepostory creates a new instance of Repostory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepostory(t mockConstructorTestingTNewRepostory) *Repostory {
	mock := &Repostory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
